pragma solidity ^0.5.0;

// lvl 1: equal split
contract AssociateProfitSplitter {
    // @TODO: Create three payable addresses representing `employee_one`, `employee_two` and `employee_three`.
    address payable employee_one = 0xa90d51d02D461D0021dbada4E52D63fca3A1a870;
    address payable employee_two = 0x15C4657B899303FF40F97eAce42249d0056dc15b;
    address payable employee_three = 0x1439f13a798Aed1d88A8c4c383f26F16317bd7De;

    constructor(address payable _one, address payable _two, address payable _three) public {
        employee_one = _one;
        employee_two = _two;
        employee_three = _three;
    }

    function balance() public view returns(uint) {
        return address(this).balance;
    }

    function deposit() public payable {
        // @TODO: Split `msg.value` into three
        uint amount = msg.value/3;
        
        // @TODO: Transfer the amount to each employee
        employee_one.transfer(amount);
        employee_two.transfer(amount);
        employee_three.transfer(amount);
        

        // @TODO: take care of a potential remainder by sending back to HR (`msg.sender`)
        // msg.sender.transfer(msg.value - (msg.value/3))
        msg.sender.transfer(msg.value - (amount * 3));
    }

    function() external payable {
        // @TODO: Enforce that the `deposit` function is called in the fallback function!
        deposit();
    }
}
